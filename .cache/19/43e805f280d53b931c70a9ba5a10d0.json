{"id":"main.js","dependencies":[{"name":"F:\\최재승\\html연습\\fastCampus\\REGEXP-TEST\\package.json","includedInParent":true,"mtime":1648686064596}],"generated":{"js":"console.log(123);\n/* 생성자 함수 방식 */\n\nvar regexp1 = new RegExp(\"^abc\"); // new RegExg(표현식)\n\nvar regexp2 = new RegExp(\"^abc\", \"gi\"); // new RegExg(표현식, 플래그)\n\n/* 리터럴방식 */\n\nvar str = \" \\n010-1234-5678\\nthesecon@gmail.com\\nhttps://www.omdbapi.com/?apikey=7035c60c&s=frozen\\nThe quick brown fox jumps over the lazy dog.\\nabbcccdddd\\nhttp://localhost:1234\\n\\uB3D9\\uD574\\uBB3C\\uACFC_\\uBC31\\uB450\\uC0B0\\uC774 \\uB9C8\\uB974\\uACE0 \\uB2F3\\uB3C4\\uB85D\\n\"; // const regexp = new RegExp('the', 'gi');\n// const regexp = /fox/gi\n// console.log(regexp.test(str));\n// str = str.replace(regexp, 'AAA');\n// str = console.log(str);\n\nvar h = \"  the hello  world       !\\n\\n\";\nconsole.log(str.match(/(?<=@).{1,}.{1,}.{1,}/g));"},"sourceMaps":{"js":{"mappings":[{"name":"console","generated":{"line":1,"column":0},"source":"main.js","original":{"line":1,"column":0}},{"generated":{"line":1,"column":7},"source":"main.js","original":{"line":1,"column":7}},{"name":"log","generated":{"line":1,"column":8},"source":"main.js","original":{"line":1,"column":8}},{"generated":{"line":1,"column":11},"source":"main.js","original":{"line":1,"column":0}},{"generated":{"line":1,"column":12},"source":"main.js","original":{"line":1,"column":12}},{"generated":{"line":1,"column":15},"source":"main.js","original":{"line":1,"column":0}},{"generated":{"line":2,"column":0},"source":"main.js","original":{"line":3,"column":0}},{"generated":{"line":4,"column":0},"source":"main.js","original":{"line":4,"column":0}},{"name":"regexp1","generated":{"line":4,"column":4},"source":"main.js","original":{"line":4,"column":6}},{"generated":{"line":4,"column":11},"source":"main.js","original":{"line":4,"column":13}},{"generated":{"line":4,"column":14},"source":"main.js","original":{"line":4,"column":16}},{"name":"RegExp","generated":{"line":4,"column":18},"source":"main.js","original":{"line":4,"column":20}},{"generated":{"line":4,"column":24},"source":"main.js","original":{"line":4,"column":16}},{"generated":{"line":4,"column":25},"source":"main.js","original":{"line":4,"column":27}},{"generated":{"line":4,"column":31},"source":"main.js","original":{"line":4,"column":16}},{"generated":{"line":4,"column":32},"source":"main.js","original":{"line":4,"column":0}},{"generated":{"line":4,"column":34},"source":"main.js","original":{"line":5,"column":0}},{"generated":{"line":6,"column":0},"source":"main.js","original":{"line":7,"column":0}},{"name":"regexp2","generated":{"line":6,"column":4},"source":"main.js","original":{"line":7,"column":6}},{"generated":{"line":6,"column":11},"source":"main.js","original":{"line":7,"column":13}},{"generated":{"line":6,"column":14},"source":"main.js","original":{"line":7,"column":16}},{"name":"RegExp","generated":{"line":6,"column":18},"source":"main.js","original":{"line":7,"column":20}},{"generated":{"line":6,"column":24},"source":"main.js","original":{"line":7,"column":16}},{"generated":{"line":6,"column":25},"source":"main.js","original":{"line":7,"column":27}},{"generated":{"line":6,"column":31},"source":"main.js","original":{"line":7,"column":16}},{"generated":{"line":6,"column":33},"source":"main.js","original":{"line":7,"column":35}},{"generated":{"line":6,"column":37},"source":"main.js","original":{"line":7,"column":16}},{"generated":{"line":6,"column":38},"source":"main.js","original":{"line":7,"column":0}},{"generated":{"line":6,"column":40},"source":"main.js","original":{"line":8,"column":0}},{"generated":{"line":8,"column":0},"source":"main.js","original":{"line":11,"column":0}},{"generated":{"line":10,"column":0},"source":"main.js","original":{"line":13,"column":0}},{"name":"str","generated":{"line":10,"column":4},"source":"main.js","original":{"line":13,"column":6}},{"generated":{"line":10,"column":7},"source":"main.js","original":{"line":13,"column":9}},{"generated":{"line":10,"column":271},"source":"main.js","original":{"line":13,"column":0}},{"generated":{"line":10,"column":273},"source":"main.js","original":{"line":24,"column":0}},{"generated":{"line":11,"column":0},"source":"main.js","original":{"line":25,"column":0}},{"generated":{"line":12,"column":0},"source":"main.js","original":{"line":26,"column":0}},{"generated":{"line":13,"column":0},"source":"main.js","original":{"line":27,"column":0}},{"generated":{"line":14,"column":0},"source":"main.js","original":{"line":28,"column":0}},{"generated":{"line":16,"column":0},"source":"main.js","original":{"line":29,"column":0}},{"name":"h","generated":{"line":16,"column":4},"source":"main.js","original":{"line":29,"column":6}},{"generated":{"line":16,"column":5},"source":"main.js","original":{"line":29,"column":7}},{"generated":{"line":16,"column":40},"source":"main.js","original":{"line":29,"column":0}},{"name":"console","generated":{"line":17,"column":0},"source":"main.js","original":{"line":32,"column":0}},{"generated":{"line":17,"column":7},"source":"main.js","original":{"line":32,"column":7}},{"name":"log","generated":{"line":17,"column":8},"source":"main.js","original":{"line":32,"column":8}},{"generated":{"line":17,"column":11},"source":"main.js","original":{"line":32,"column":0}},{"name":"str","generated":{"line":17,"column":12},"source":"main.js","original":{"line":32,"column":12}},{"generated":{"line":17,"column":15},"source":"main.js","original":{"line":32,"column":15}},{"name":"match","generated":{"line":17,"column":16},"source":"main.js","original":{"line":32,"column":16}},{"generated":{"line":17,"column":21},"source":"main.js","original":{"line":32,"column":12}},{"generated":{"line":17,"column":22},"source":"main.js","original":{"line":32,"column":22}},{"generated":{"line":17,"column":46},"source":"main.js","original":{"line":32,"column":12}},{"generated":{"line":17,"column":47},"source":"main.js","original":{"line":32,"column":0}}],"sources":{"main.js":"console.log(123);\r\n\r\n/* 생성자 함수 방식 */ \r\nconst regexp1 = new RegExp(\"^abc\");\r\n// new RegExg(표현식)\r\n\r\nconst regexp2 = new RegExp(\"^abc\", \"gi\");\r\n// new RegExg(표현식, 플래그)\r\n\r\n\r\n/* 리터럴방식 */ \r\n\r\nconst str = ` \r\n010-1234-5678\r\nthesecon@gmail.com\r\nhttps://www.omdbapi.com/?apikey=7035c60c&s=frozen\r\nThe quick brown fox jumps over the lazy dog.\r\nabbcccdddd\r\nhttp://localhost:1234\r\n동해물과_백두산이 마르고 닳도록\r\n`;\r\n\r\n\r\n// const regexp = new RegExp('the', 'gi');\r\n// const regexp = /fox/gi\r\n// console.log(regexp.test(str));\r\n// str = str.replace(regexp, 'AAA');\r\n// str = console.log(str);\r\nconst h = `  the hello  world       !\r\n\r\n`;\r\nconsole.log(str.match(/(?<=@).{1,}.{1,}.{1,}/g));\r\n\r\n"},"lineCount":null}},"error":null,"hash":"511ab08dcd98a7849d3354831e2e31b8","cacheData":{"env":{}}}